/*
<metadata description="Create up to 25 Buttons, Switches, Faders or XYZ Pads.&#13;&#13;SWONIC.com | v1.2-dev"
          details="Turns your Lightpad into a flexible MIDI control surface. Set your desired amount of controls, their appearance and behaviour."
          target="Lightpad" tags="MIDI;Controller" canEmbedModes="false">

    <groups>
        <group name="control" displayName="Control *" count="25"/>
    </groups>

    <variables>
        <variable name="amount" displayName="Control Amount" type="int"
                  min="1" max="25" value="1"
                  tooltip="Number of controls to display, 1-16"/>
        <variable name="midiChannel" displayName="MIDI Channel" type="int"
                  min="1" max="16" value="1"
                  tooltip="MIDI channel that is used for all controls"/>

        <vector group="control" count="25"
                wantsGetFunctions="true" wantsSetFunctions="false">

            <variable name="ControlType" displayName="Type" type="option"
                      options="Button;Switch;Fader;XYZ Pad" value="Button"
                      tooltip="Button: Sends x CC, 127.&#13;Switch: Sends x CC, 127 or 0.&#13;Fader: Sends x CC or y CC, 0-127.&#13;XYZ-Pad: Sends x CC and y CC, 0-127"/>
            <variable name="ControlColour" displayName="Colour" type="colour"
                      value="random" tooltip="Colour of the control"/>
            <variable name="ControlPosX" displayName="x Position" type="int"
                      min="1" max="15" value="1"
                      tooltip="Horizontal position of the control, 1-15"/>
            <variable name="ControlInvPosY" displayName="y Position" type="int"
                      min="1" max="15" value="1"
                      tooltip="Vertical position of the control, 1-15"/>
            <variable name="ControlWidth" displayName="x Width" type="int"
                      min="1" max="15" value="1"
                      tooltip="Horizontal size of the control, 1-15"/>
            <variable name="ControlHeight" displayName="y Height" type="int"
                      min="1" max="15" value="1"
                      tooltip="Vertical size of the control, 1-15"/>
            <variable name="ControlCC1" displayName="x MIDI CC" type="int"
                      min="1" max="127" initStart="102"
                      tooltip="MIDI CC message for Strike (touch) and Glide (horizontal movement)"/>
            <variable name="ControlCC2" displayName="y MIDI CC" type="int"
                      min="1" max="127" initStart="102"
                      tooltip="MIDI CC message for Slide (vertical movement)"/>
            <variable name="ControlCC3" displayName="z MIDI CC" type="int"
                      min="1" max="127" initStart="102"
                      tooltip="MIDI CC message for Press (pressure)"/>
            <variable name="SendPress" displayName="Send Pressure" type="bool"
                      value="false" tooltip="Activate to send z CC"/>
        </vector>

    </variables>
</metadata>
*/

//==============================================================================
//
//  DYNAMIC CONTROLS
//
//   ROLI Dashboard app for ROLI Lightpad BLOCK
//
//   developed by Andreas Swoboda alias SWONIC
//
//   contact: http://swonic.com | mail@swonic.com
//
//   copyright: Andreas Swoboda, 2018
//
//   version: 1.2-dev
//
//==============================================================================

#heapsize: 25
//
//  Heap Layout:
//  byte 0 - 24 - control values [0, 127]
//

//==============================================================================
//  Global Constants
//==============================================================================

const int MAX_CONTROLS = 25;
const int STATUS_OFFSET_CC = 176;           // status byte0 offset for CC messages

// TODO: generate inactive colours from active ones
const int ControlBgColour = 0xFF070707;     // inactive control colour
                                            // X and XY didn't have alpha, what changed here?

//==============================================================================
//  Control Value Setter and Getter
//==============================================================================

void setControlValue(int index, int value)
{
    setHeapByte(index, value);
}

int getControlValue(int index)
{
    return getHeapByte(index);
}

//==============================================================================
//  Initialisation
//==============================================================================

void initialise()
{
//  Update global MIDI channel value to [0, 15]
    midiChannel -= 1;

//  Initialise Control Values
    for (int i = 0; i < MAX_CONTROLS; ++i)
    {
        setControlValue(i, 0);
    }
}

//==============================================================================
//  Conversion Functions
//==============================================================================

//  Invert the Y axis
//  NOTE: temporary surface-level solution; metadata parameter for Y renamed
//  TODO: deeper, more performant solution for Y axis inversion

int getControlPosY(int index)
{
    return 15 - getControlInvPosY(index) - getControlHeight(index) + 2;
}

//  Touch position (0-2) to pixel/LED position (0-14)
int convertPositionToPixel(float pos)
{
    return int(pos * 0.5 * 15.0);
}

//  Pixel/LED position (0-14) to touch position (0-2)
float convertPixelToPosition(int pixel)
{
    return float(pixel * 2.0 / 15.0);
}

//  Control position (0-2) to MIDI (0-127)
int convertPositionToMIDI(float pos, float range)
{
    float value = map(pos+0.1, 0.2, range, 0.0, 127.0);

    if (value > 126)
        return 127;
    else if (value < 1)
        return 0;
    else
        return int(value);
}

//  MIDI (0-127) to controller pixel value
int convertMIDItoPixel(float midi, float range)
{
    float value = map(midi, 0.0, 127.0, 0.0, range);

    if (value > 0 && value < 1)
        return 1;
    else
        return int(value);
}

//==============================================================================
//  Return Functions
//==============================================================================

//  Returns controller index for X and Y coordinates (0, 2).
//      If no controls touched, -1 returned
int ControlIndexForXandY(float x, float y)
{
    int xTouch = convertPositionToPixel(x);
    int yTouch = convertPositionToPixel(y);
    int ControlIndex = -1; // Is set to -1 to return a negative value if no active control is found

    for (int i = 0; i < amount; ++i)
    {
        if (   xTouch >= (getControlPosX(i) - 1)
            && xTouch <  (getControlPosX(i) - 1 + getControlWidth(i))
            && yTouch >= (getControlPosY(i) - 1)
            && yTouch <  (getControlPosY(i) - 1 + getControlHeight(i)))
            ControlIndex = i;
    }

    return ControlIndex;
}

//  Direction of a fader control, with controller index of i
int getFaderDirection(int i)
{
//  TODO: use ENUM-style constants for clarity instead of bool!

    if (getControlWidth(i) > getControlHeight(i))
        return false;       // horizontal
    else
        return true;        // vertical
}

//==============================================================================
//  Touch Handlers
//==============================================================================

//  TODO: Control index can be passed into handler functions.
//        Make distinction b/w i and index clearer.

//  Send Touch-Event to corresponding controller function
void touchStart(int index, float x, float y, float z, float vz)
{
    int i = ControlIndexForXandY(x, y);

//  TODO: Use ENUM-style constants for clarity instead of numbers

    if (i >= 0)
    {
        if (getControlType(i) == 0)             // Button
            doTouchButton (index, x, y, z);
        else if (getControlType(i) == 1)        // Switch
            doTouchSwitch (index, x, y, z);
        else if (getControlType(i) == 2)        // Fader
            doTouchFader (index, x, y, z);
        else if (getControlType(i) == 3)        // XYZ-Pad
            doTouchXYZPad (index, x, y, z, 75.0);

        if (getSendPress(i) == true)            // Pressure
            doTouchPressure(i, z);
    }
}

void touchMove(int index, float x, float y, float z, float vz)
{
    int i = ControlIndexForXandY(x, y);

//  TODO: Use ENUM-style constants for clarity instead of numbers

    if (i >= 0)
    {
        if (getControlType(i) == 2)             // Fader
            doTouchFader (index, x, y, z);
        else if (getControlType(i) == 3)        // XYZ-Pad
            doTouchXYZPad (index, x, y, z, 20.0);

        if (getSendPress(i) == true)            // Pressure
            doTouchPressure(i, z);
    }
}

void touchEnd(int index, float x, float y, float z, float vz)
{
    int i = ControlIndexForXandY(x, y);

//  TODO: Use ENUM-style constants for clarity instead of numbers

    if (i >= 0)
    {
        if (getControlType(i) == 2)             // Fader
            doTouchFader (index, x, y, z);
        else if (getControlType(i) == 3)        // XYZ-Pad
            doTouchXYZPad (index, x, y, z, 0.0);

//  TODO: don't ROLI apps send pressure on touchEnd too?
    }

    for (int i = 0; i < amount; ++i)            // Reset active buttons
        if (getControlType(i) == 0)
            setControlValue(i, 0);
}

//  TODO: currently passing the index is pointless; i could pe passed into function

//  Handle Button-Touch
void doTouchButton(int index, float x, float y, float z)
{
    int i = ControlIndexForXandY(x, y);
    setControlValue(i, 127);
    sendCC (midiChannel, getControlCC1(i), getControlValue(i));
}

// Handle Switch-Touch
void doTouchSwitch(int index, float x, float y, float z)
{
    int i = ControlIndexForXandY (x, y);

    if (getControlValue(i) == 127)
    {
        setControlValue(i, 0);
        sendCC (midiChannel, getControlCC1(i), getControlValue(i));
    }
    else
    {
        setControlValue(i, 127);
        sendCC (midiChannel, getControlCC1(i), getControlValue(i));
    }
}

//  Handle Fader-Touch
void doTouchFader(int index, float x, float y, float z)
{
    int i = ControlIndexForXandY(x, y);
    bool dir = getFaderDirection(i);
    handleXYmove (dir, i, x, y);
}

//  Handle XYZ-Pad
void doTouchXYZPad(int index, float x, float y, float z, float scale)
{
    int i = ControlIndexForXandY (x, y);
    addPressurePoint (ControlBgColour , x, y, z * scale);
    handleXYmove (false, i, x, y);
    handleXYmove (true, i, x, y);
}

//  Handle XY Movement
void handleXYmove(bool dir, int i, float x, float y)
{
    float value;
    float range;

    if (dir == false)   // horizontal
    {
        range = convertPixelToPosition(getControlWidth(i));
        value = 127 - convertPositionToMIDI(2 - x - convertPixelToPosition(16 - getControlPosX(i) - getControlWidth(i)), range);
        setControlValue(i, int(value));
        sendCC(midiChannel, getControlCC1(i), int(value));
    }
    else                // vertical
    {
        range = convertPixelToPosition(getControlHeight(i));
        value = convertPositionToMIDI(2 - y - convertPixelToPosition(16 - getControlPosY(i) - getControlHeight(i)), range);
        setControlValue(i, int(value));
        sendCC(midiChannel, getControlCC2(i), int(value));
    }
}

// Handle Pressure
void doTouchPressure(int i, float z)
{
    float valueZ;
    valueZ = map(z, 0.0, 1.0, 0.0, 127.0);
    sendCC(midiChannel, getControlCC3(i), int(valueZ));
}

//==============================================================================
//  Handle Incoming MIDI
//==============================================================================

void handleMIDI(int byteStatus, int byteCC, int byteValue)
{
//  TODO: is it better/safer to use bitmasks instead?

    byteStatus -= STATUS_OFFSET_CC;     // subtract offset for CC messages

    if (byteStatus == midiChannel)
        for (int i = 0; i < amount; ++i)
        {
            if (getControlCC1(i) == byteCC)
                setControlValue(i, byteValue);
            else if (getControlCC2(i) == byteCC)
                setControlValue(i, byteValue);
//          else if (getControlCC3(i) == byteCC)
//              setControlValue(i, byteValue);
        }
}

//==============================================================================
//  Repaint
//==============================================================================

void repaint()
{
    clearDisplay();

    for (int i = 0; i < amount; ++i)
    {
        if (getControlType(i) == 0)             // Draw Buttons
        {
            if (getControlValue(i) == 127)
                fillRect(ControlBgColour,
                         getControlPosX(i) - 1, getControlPosY(i) - 1,
                         getControlWidth(i), getControlHeight(i));
            else
                fillRect(getControlColour(i),
                         getControlPosX(i) - 1, getControlPosY(i) - 1,
                         getControlWidth(i), getControlHeight(i));
        }
        else if (getControlType(i) == 1)        // Draw Switches
        {
            if (getControlValue(i) == 127)
                fillRect(getControlColour(i),
                         getControlPosX(i) - 1, getControlPosY(i) - 1,
                         getControlWidth(i), getControlHeight(i));
            else
                fillRect(ControlBgColour,
                         getControlPosX(i) - 1, getControlPosY(i) - 1,
                         getControlWidth(i), getControlHeight(i));
        }
        else if (getControlType(i) == 2)        //  Draw Faders
        {
            int value = getControlValue(i);
            int pxValue;

            if (getFaderDirection(i) == false)  // horizontal
            {
                fillRect(ControlBgColour,
                         getControlPosX(i) - 1, getControlPosY(i) - 1,
                         getControlWidth(i), getControlHeight(i));  // draw range
                pxValue = convertMIDItoPixel(float(value),          // convert MIDI (0-127) to controller pixel range
                                             float(getControlWidth(i)));
                fillRect(getControlColour(i),
                         getControlPosX(i) - 1, getControlPosY(i) - 1,
                         pxValue, getControlHeight(i));             // draw value
            }
            else // vertical
            {
                fillRect(ControlBgColour,
                         getControlPosX(i) - 1, getControlPosY(i) - 1,
                         getControlWidth(i), getControlHeight(i));  // draw range
                pxValue = convertMIDItoPixel(float(value),          // convert MIDI (0-127) to controller pixel range
                                             float(getControlHeight(i)));
                fillRect(getControlColour(i),
                         getControlPosX(i) - 1, getControlPosY(i) - 1 + getControlHeight(i) - pxValue,
                         getControlWidth(i), pxValue); // draw value
            }
        }
        else if (getControlType(i) == 3)        //  Draw XYZ-Pads
        {
            fillRect (getControlColour(i),
                      getControlPosX(i) - 1, getControlPosY(i) - 1,
                      getControlWidth(i), getControlHeight(i));
            drawPressureMap();
            fadePressureMap();
        }
    }
}

/*
<display backgroundColour="0xFF7E7E7E" textColour ="0xFFFFFFFF">
    <pixels>
        <pixel index="1" colour="0xFFD37201" />
        <pixel index="2" colour="0xFFD37201" />
        <pixel index="4" colour="0xFFD37201" />
        <pixel index="5" colour="0xFFD37201" />
        <pixel index="7" colour="0xFFD37201" />
        <pixel index="8" colour="0xFFD37201" />
        <pixel index="10" colour="0xFFD37201" />
        <pixel index="11" colour="0xFFD37201" />
        <pixel index="13" colour="0xFFD37201" />
        <pixel index="14" colour="0xFFD37201" />
        <pixel index="16" colour="0xFFD37201" />
        <pixel index="17" colour="0xFFD37201" />
        <pixel index="19" colour="0xFFD37201" />
        <pixel index="20" colour="0xFFD37201" />
        <pixel index="22" colour="0xFFD37201" />
        <pixel index="23" colour="0xFFD37201" />
        <pixel index="25" colour="0xFFD37201" />
        <pixel index="26" colour="0xFFD37201" />
        <pixel index="28" colour="0xFFD37201" />
        <pixel index="29" colour="0xFFD37201" />
        <pixel index="31" colour="0xFFD37201" />
        <pixel index="32" colour="0xFFD37201" />
        <pixel index="34" colour="0xFFD37201" />
        <pixel index="35" colour="0xFFD37201" />
        <pixel index="46" colour="0xFFD37201" />
        <pixel index="47" colour="0xFFD37201" />
        <pixel index="49" colour="0xFFD37201" />
        <pixel index="50" colour="0xFFD37201" />
        <pixel index="52" colour="0xFFD37201" />
        <pixel index="53" colour="0xFFD37201" />
        <pixel index="55" colour="0xFFD37201" />
        <pixel index="56" colour="0xFFD37201" />
        <pixel index="58" colour="0xFFD37201" />
        <pixel index="59" colour="0xFFD37201" />
        <pixel index="61" colour="0xFFD37201" />
        <pixel index="62" colour="0xFFD37201" />
        <pixel index="64" colour="0xFFD37201" />
        <pixel index="65" colour="0xFFD37201" />
        <pixel index="67" colour="0xFFD37201" />
        <pixel index="68" colour="0xFFD37201" />
        <pixel index="70" colour="0xFFD37201" />
        <pixel index="71" colour="0xFFD37201" />
        <pixel index="73" colour="0xFFD37201" />
        <pixel index="74" colour="0xFFD37201" />
        <pixel index="76" colour="0xFFD37201" />
        <pixel index="77" colour="0xFFD37201" />
        <pixel index="79" colour="0xFFD37201" />
        <pixel index="80" colour="0xFFD37201" />
        <pixel index="91" colour="0xFFD37201" />
        <pixel index="92" colour="0xFFD37201" />
        <pixel index="94" colour="0xFFD37201" />
        <pixel index="95" colour="0xFFD37201" />
        <pixel index="97" colour="0xFFD37201" />
        <pixel index="98" colour="0xFFD37201" />
        <pixel index="99" colour="0xFFD37201" />
        <pixel index="100" colour="0xFFD37201" />
        <pixel index="101" colour="0xFFD37201" />
        <pixel index="102" colour="0xFFD37201" />
        <pixel index="103" colour="0xFFD37201" />
        <pixel index="104" colour="0xFFD37201" />
        <pixel index="106" colour="0xFFD37201" />
        <pixel index="107" colour="0xFFD37201" />
        <pixel index="109" colour="0xFFD37201" />
        <pixel index="110" colour="0xFFD37201" />
        <pixel index="112" colour="0xFFD37201" />
        <pixel index="113" colour="0xFFD37201" />
        <pixel index="114" colour="0xFFD37201" />
        <pixel index="115" colour="0xFFD37201" />
        <pixel index="116" colour="0xFFD37201" />
        <pixel index="117" colour="0xFFD37201" />
        <pixel index="118" colour="0xFFD37201" />
        <pixel index="119" colour="0xFFD37201" />
        <pixel index="121" colour="0xFFD37201" />
        <pixel index="122" colour="0xFFD37201" />
        <pixel index="124" colour="0xFFD37201" />
        <pixel index="125" colour="0xFFD37201" />
        <pixel index="127" colour="0xFFD37201" />
        <pixel index="128" colour="0xFFD37201" />
        <pixel index="129" colour="0xFFD37201" />
        <pixel index="130" colour="0xFFD37201" />
        <pixel index="131" colour="0xFFD37201" />
        <pixel index="132" colour="0xFFD37201" />
        <pixel index="133" colour="0xFFD37201" />
        <pixel index="134" colour="0xFFD37201" />
        <pixel index="136" colour="0xFFD37201" />
        <pixel index="137" colour="0xFFD37201" />
        <pixel index="139" colour="0xFFD37201" />
        <pixel index="140" colour="0xFFD37201" />
        <pixel index="142" colour="0xFFD37201" />
        <pixel index="143" colour="0xFFD37201" />
        <pixel index="144" colour="0xFFD37201" />
        <pixel index="145" colour="0xFFD37201" />
        <pixel index="146" colour="0xFFD37201" />
        <pixel index="147" colour="0xFFD37201" />
        <pixel index="148" colour="0xFFD37201" />
        <pixel index="149" colour="0xFFD37201" />
        <pixel index="151" colour="0xFFD37201" />
        <pixel index="152" colour="0xFFD37201" />
        <pixel index="154" colour="0xFFD37201" />
        <pixel index="155" colour="0xFFD37201" />
        <pixel index="157" colour="0xFFD37201" />
        <pixel index="158" colour="0xFFD37201" />
        <pixel index="159" colour="0xFFD37201" />
        <pixel index="160" colour="0xFFD37201" />
        <pixel index="161" colour="0xFFD37201" />
        <pixel index="162" colour="0xFFD37201" />
        <pixel index="163" colour="0xFFD37201" />
        <pixel index="164" colour="0xFFD37201" />
        <pixel index="166" colour="0xFFD37201" />
        <pixel index="167" colour="0xFFD37201" />
        <pixel index="169" colour="0xFFD37201" />
        <pixel index="170" colour="0xFFD37201" />
        <pixel index="172" colour="0xFFD37201" />
        <pixel index="173" colour="0xFFD37201" />
        <pixel index="174" colour="0xFFD37201" />
        <pixel index="175" colour="0xFFD37201" />
        <pixel index="176" colour="0xFFD37201" />
        <pixel index="177" colour="0xFFD37201" />
        <pixel index="178" colour="0xFFD37201" />
        <pixel index="179" colour="0xFFD37201" />
        <pixel index="181" colour="0xFFD37201" />
        <pixel index="182" colour="0xFFD37201" />
        <pixel index="184" colour="0xFFD37201" />
        <pixel index="185" colour="0xFFD37201" />
        <pixel index="187" colour="0xFFD37201" />
        <pixel index="188" colour="0xFFD37201" />
        <pixel index="189" colour="0xFFD37201" />
        <pixel index="190" colour="0xFFD37201" />
        <pixel index="191" colour="0xFFD37201" />
        <pixel index="192" colour="0xFFD37201" />
        <pixel index="193" colour="0xFFD37201" />
        <pixel index="194" colour="0xFFD37201" />
        <pixel index="196" colour="0xFFD37201" />
        <pixel index="197" colour="0xFFD37201" />
        <pixel index="199" colour="0xFFD37201" />
        <pixel index="200" colour="0xFFD37201" />
        <pixel index="202" colour="0xFFD37201" />
        <pixel index="203" colour="0xFFD37201" />
        <pixel index="204" colour="0xFFD37201" />
        <pixel index="205" colour="0xFFD37201" />
        <pixel index="206" colour="0xFFD37201" />
        <pixel index="207" colour="0xFFD37201" />
        <pixel index="208" colour="0xFFD37201" />
        <pixel index="209" colour="0xFFD37201" />
    </pixels>
</display>
*/
