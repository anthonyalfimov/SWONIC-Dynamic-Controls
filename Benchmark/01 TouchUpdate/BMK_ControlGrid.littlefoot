/*
<metadata description="Turn your Lightpad Block into multiple control pads." details="This App gives you a grid of pads that can be notes or CCs with or without pressure. Set the grid size and the behaviour and MIDI output of each pad." 
          target="Lightpad" 
          tags="MIDI;Melodic;Controller;">

    <groups>
        <group name="pads" displayName="Pad *" count="25" />
        <group name="colours" displayName="Pad Colors" />
    </groups>
    <variables>
        <variable name="gridOption" displayName="Grid Size" type="option" value="5x5" options="1x1;2x2;3x3;4x4;5x5;" tooltip="Select the number of pads in the grid" />
        <variable name="channel" displayName="MIDI Channel" type="int" min="1" max="16" value="1" displayMode="stepper" tooltip="The MIDI channel that values are sent on" />
        <variable name="noteOffTime" displayName="Trigger Time (msec)" type="int" min="0" max="2000" value="500" displayMode="slider" tooltip="How long after a note on will note off events be sent for Trigger mode pads" />
        <variable name="wantsPolyPressure" displayName="Use Poly Pressure" type="bool" value="true"  toolTip="Should polyphonic pressure be used, or ignored"/>
        <vector count="25" group="pads" wantsGetFunctions="true" wantsSetFunctions="true">
            <variable name="behaviour" displayName="Behavior" type="option" value="Note on/off" options="Note on/off;Controller;" tooltip="Select the behavior of the pad.&#13;Note on/off sends note information when pads are interacted with.&#13;Controller will send MIDI CC data when pads are interacted with"/>
            <variable name="action" displayName="Action" type="option" value="Gate" options="Toggle;Gate;Trigger;" tooltip="Set the action for the pad&#13;&#13;Toggle sends high and then low values with successive taps of the pad&#13;&#13;Gate will send high values whilst you are pressing a pad, and low value once you release.&#13;&#13;Trigger sends a high value and then a low value after a pre-set time"/>
            <variable name="note" displayName="Note" type="midiNote" value="C3" initStart="60" tooltip="The note that will be sent when using the Note On/Off mode" />
            <variable name="CC" displayName="CC" type="int" min="0" max="127" value="102" initStart="102" tooltip="The CC that will be sent when using the Controller mode" />
            <variable name="pressure" displayName="Send Pressure" type="bool" value="true" tooltip="Will pressure be sent for this pad?" />
        </vector>
        <vector count="25" wantsGetFunctions="true">
            <variable name="padColour" displayName="Pad * Color" group="colours" type="colour" value="random" tooltip="Set the color of the pad"/>
        </vector>
    </variables>
</metadata>
*/

#heapsize: 381

/*
 * Heap layout is as follows:
 * bytes 0 - 16 touch to touch pads
 * byte 32+
 * Index 0 4 bytes note off delta
 * Index 1 4 bytes start time
 * Index 2 4 bytes velocity
 *
 */

int padWidth;
int padSpacing;
int gridSize;
int numPads;    // Num pads in the grid, so a gridSize=4 would set this to 16
int activePads;
int dimFactor;
int dimDelay;
int dimDelta;
bool gammaCorrected;

const int behaviourNoteOnOff = 0;
const int behaviourCC        = 1;
const int actionToggle       = 0;
const int actionGate         = 1;
const int actionTrigger      = 2;

void setPadActive (int padIndex, bool shouldBeActive)
{
    activePads = shouldBeActive ? (activePads | (1 << padIndex)) : (activePads & ~(1 << padIndex));
}

bool isPadActive (int padIndex)
{
    return activePads & (1 << padIndex);
}

bool isAnyPadActive()
{
    return activePads;
}

void setPadForTouch (int touchIndex, int padIndex)
{
    setHeapByte (touchIndex, padIndex);
}

int getPadForTouch (int touchIndex)
{
    return getHeapByte (touchIndex);
}

int getTrailColour (int padColour)
{
    if (gridSize == 1)
    {
        // Note - With a grid size of 1, we dont see the pad dim at note on (and hence its next to impossible to see the touch)
        // With this, we draw a white heat trail over the top of the pad, giving a clear touch indication
        // There is the potential that the heat trail being white might clash with the chosen colour,
        // But given that its white, i figure we will normally still be able to see it, and it avoids having
        return 0xFFFFFF;
    }

    if (padColour == 0xff000000)
    {
        return 0xffaaaaaa;
    }

    return blendARGB (0x88ffffff, padColour);
}

void onStateChanged()
{
    gridSize   = gridOption + 1;
    numPads    = gridSize * gridSize;
    padWidth   = 15 / gridSize;
    padSpacing = gridSize > 1 ? (15 - gridSize * padWidth) / (gridSize - 1) : 0;
    padWidth  += padSpacing;
}

void initialise()
{
    onStateChanged();
	activePads = 0;
	dimFactor  = 0;
    dimDelta   = 0;
	dimDelay   = 12;

    setLocalConfig (33, 1);
    gammaCorrected = getLocalConfig (33) > 0;

	for (int i = 0; i < 32; ++i)
        setLocalConfigActiveState (i, false, false);
}

void updateDimFactor()
{
	if (isAnyPadActive() || dimDelta)
	{
	    if (dimFactor < 180)
	    {
	        dimDelta = 60;
	    }
	    else
	    {
	        dimDelta = 0;
	    }

		dimFactor += dimDelta;
		dimDelay  = 8;
	}
	else
	{
		if (--dimDelay <= 0)
		{
			dimFactor -= 24;

			if (dimFactor < 0)
		    {
				dimFactor = 0;
		    }
		}
	}
}

void drawPads()
{
    int padIndex = 0;
	for (int padY = 0; padY < gridSize; ++padY)
	{
		for (int padX = 0; padX < gridSize; ++padX)
		{
		    int padColour     = getPadColour (padIndex);
		    int overlayColour = isPadActive (padIndex) ? 0x33ffffff : (dimFactor << 24);

            fillRect (blendARGB (padColour, overlayColour),
                      padX * padWidth, (gridSize - padY - 1) * padWidth,
                      padWidth - padSpacing, padWidth - padSpacing);


            ++padIndex;
		}
	}
}

void sendNoteOffForPad (int padIndex, int velocity)
{
    sendMIDI (0x80 + (channel - 1), getNote (padIndex), velocity);
    setPadActive (padIndex, false);
}

void sendNoteOnForPad (int padIndex, int velocity)
{   
    sendMIDI (0x90 + (channel - 1), getNote (padIndex), velocity);
    setPadActive (padIndex, true);
}

void sendCCForPad (int padIndex, int ccValue, bool changePadActiveStatus)
{
    sendCC ((channel - 1), getCC (padIndex), ccValue);
    if (changePadActiveStatus)
    {
        setPadActive (padIndex, ccValue == 127);
    }
}

int getVelocityForVz (float vz)
{
    return clamp (1, 127, int (vz * 127.0));
}

int getPressureForZ (float z)
{
    return int ((z * z) * 127.0);
}

void handleNoteOnOffTouchStart (int padIndex, int action, int velocity, bool pressure)
{
    if (action == actionToggle)
    {
        if (isPadActive (padIndex))
        {
            sendNoteOffForPad (padIndex, velocity);
        }
        else
        {
            sendNoteOnForPad (padIndex, velocity);
        }
    }
    else if (action == actionGate)
    {
        sendNoteOnForPad (padIndex, velocity);
    }
    else if (action == actionTrigger)
    {
        sendNoteOnForPad (padIndex, velocity);
        setPadOffDeltaTime (padIndex, noteOffTime, velocity);
    }
}

void sendPressure (int padIndex, int pressure)
{
    if (getBehaviour (padIndex) == behaviourNoteOnOff)
    {
        if (wantsPolyPressure)
        {
            sendMIDI (0xa0 | (channel - 1), getNote (padIndex), pressure);
        }
        else
        {
            sendMIDI (0xd0 | (channel - 1), pressure);
        }
    }
    else
    {
        sendCCForPad (padIndex, pressure, false);
    }
}

void handleCCTouchStart (int padIndex, int action, int velocity, bool pressure)
{
    if (! pressure)
    {
        if (action == actionToggle)
        {
            if (isPadActive (padIndex))
            {
                sendCCForPad (padIndex, 0, true);
            }
            else
            {
                sendCCForPad (padIndex, 127, true);
            }
        }
        else if (action == actionGate)
        {
            sendCCForPad (padIndex, 127, true);
        }
        else if (action == actionTrigger)
        {
            sendCCForPad (padIndex, 127, true);
            setPadOffDeltaTime (padIndex, noteOffTime, 0);
        }
    }
}

void touchStart (int touchIndex, float x, float y, float z, float vz)
{
    int row = gridSize - (int (y * (0.95 / 2.0) * float (gridSize))) - 1;
	int col = int (x * (0.95 / 2.0) * float (gridSize));
	int padIndex  = (gridSize * row) + col;
    
    int action    = getAction (padIndex);
    int velocity  = getVelocityForVz (vz);
    bool pressure = getPressure (padIndex);

    if (getBehaviour (padIndex) == behaviourNoteOnOff)
    {
        handleNoteOnOffTouchStart (padIndex, action, velocity, pressure);
    }
    else
    {
        handleCCTouchStart (padIndex, action, velocity, pressure);
    }

    if (pressure)
    {
        sendPressure (padIndex, getPressureForZ (z));
    }

    addPressurePoint (getTrailColour (getPadColour (padIndex)), x, y, z * 10.0);
    setPadForTouch (touchIndex, padIndex);
    
//==============================================================================
//  Log touchStart()
//==============================================================================
    //log(getTimeInCurrentFunctionCall());
}

void touchMove (int touchIndex, float x, float y, float z, float vz)
{
    int padIndex = getPadForTouch (touchIndex);
    if (padIndex == 0xff)
    {
        return;  // touch was not started.
    }

    if (getPressure (padIndex))
    {
        sendPressure (padIndex, getPressureForZ (z));
    }

    addPressurePoint (getTrailColour (getPadColour (padIndex)), x, y, z * 10.0);
    
//==============================================================================
//  Log touchMove()
//==============================================================================
    log(getTimeInCurrentFunctionCall());
}

void touchEnd (int touchIndex, float x, float y, float z, float vz)
{
    int padIndex = getPadForTouch (touchIndex);

    if (padIndex == 0xff)
    {
        return;  // touch was not started.
    }

    if (getPressure (padIndex))
    {
        sendPressure (padIndex, getPressureForZ (z));
    }

    int behaviour = getBehaviour (padIndex);
    int action    = getAction (padIndex);
    if (behaviour == behaviourNoteOnOff)
    {
        if (action == actionGate)
        {
            sendNoteOffForPad (padIndex, getVelocityForVz (vz));
        }
    }
    else
    {
        if (action == actionGate && ! getPressure (padIndex))
        {
            sendCCForPad (padIndex, 0, true);
        }
    }

    setPadForTouch (touchIndex, 0xff);
    
//==============================================================================
//  Log touchEnd()
//==============================================================================
    //log(getTimeInCurrentFunctionCall());
}

void setPadOffDeltaTime (int padIndex, int delta, int velocity)
{
    int basePadAddress = 32 + (padIndex * 12);

    setHeapInt (basePadAddress,     delta);
    setHeapInt (basePadAddress + 4, getMillisecondCounter());
    setHeapInt (basePadAddress + 8, velocity);
}

void updateNoteOffTime()
{
    int currentTime = getMillisecondCounter();
    for (int padIndex = 0; padIndex < numPads; ++padIndex)
    {
        int padAddress = 32 + (padIndex * 12);
        int padTime = getHeapInt (padAddress);
        if (padTime > 0)
        {
            int padStartTime = getHeapInt (padAddress + 4);
            if (currentTime - padStartTime >= padTime)
            {
                int velocity = getHeapInt (padAddress + 8);
                if (getBehaviour (padIndex) == 0)
                {
                    sendNoteOffForPad (padIndex, velocity);
                }
                else
                {
                    sendCCForPad (padIndex, velocity, false);
                }
                setPadOffDeltaTime (padIndex, 0, 0);
            }
        }
    }
}

void repaint()
{
    clearDisplay();
	updateDimFactor();
    drawPads();
    updateNoteOffTime();
    drawPressureMap();
    fadePressureMap();
    
//==============================================================================
//  Log repaint()
//==============================================================================
    //log(getTimeInCurrentFunctionCall());
}


/*
<display backgroundColour="0xFF548CE8" textColour ="0xFF000000">
    <pixels>
        <pixel index="0" colour="0xC0D51FC4" />
        <pixel index="1" colour="0xC0D51FC4" />
        <pixel index="2" colour="0xC0D51FC4" />
        <pixel index="4" colour="0xD20DF79A" />
        <pixel index="5" colour="0xD20DF79A" />
        <pixel index="6" colour="0xD20DF79A" />
        <pixel index="8" colour="0xFF1A95C5" />
        <pixel index="9" colour="0xFF1A95C5" />
        <pixel index="10" colour="0xFF1A95C5" />
        <pixel index="12" colour="0xE8EB5B11" />
        <pixel index="13" colour="0xE8EB5B11" />
        <pixel index="14" colour="0xE8EB5B11" />
        <pixel index="15" colour="0xC0D51FC4" />
        <pixel index="16" colour="0xC0D51FC4" />
        <pixel index="17" colour="0xC0D51FC4" />
        <pixel index="19" colour="0xD20DF79A" />
        <pixel index="20" colour="0xD20DF79A" />
        <pixel index="21" colour="0xD20DF79A" />
        <pixel index="23" colour="0xFF1A95C5" />
        <pixel index="24" colour="0xFF1A95C5" />
        <pixel index="25" colour="0xFF1A95C5" />
        <pixel index="27" colour="0xE8EB5B11" />
        <pixel index="28" colour="0xE8EB5B11" />
        <pixel index="29" colour="0xE8EB5B11" />
        <pixel index="30" colour="0xC0D51FC4" />
        <pixel index="31" colour="0xC0D51FC4" />
        <pixel index="32" colour="0xC0D51FC4" />
        <pixel index="34" colour="0xD20DF79A" />
        <pixel index="35" colour="0xD20DF79A" />
        <pixel index="36" colour="0xD20DF79A" />
        <pixel index="38" colour="0xFF1A95C5" />
        <pixel index="39" colour="0xFF1A95C5" />
        <pixel index="40" colour="0xFF1A95C5" />
        <pixel index="42" colour="0xE8EB5B11" />
        <pixel index="43" colour="0xE8EB5B11" />
        <pixel index="44" colour="0xE8EB5B11" />
        <pixel index="60" colour="0xC3C05799" />
        <pixel index="61" colour="0xC3C05799" />
        <pixel index="62" colour="0xC3C05799" />
        <pixel index="64" colour="0xC2EB1616" />
        <pixel index="65" colour="0xC2EB1616" />
        <pixel index="66" colour="0xC2EB1616" />
        <pixel index="68" colour="0xC1CAE56B" />
        <pixel index="69" colour="0xC1CAE56B" />
        <pixel index="70" colour="0xC1CAE56B" />
        <pixel index="72" colour="0xFF548C23" />
        <pixel index="73" colour="0xFF548C23" />
        <pixel index="74" colour="0xFF548C23" />
        <pixel index="75" colour="0xC3C05799" />
        <pixel index="76" colour="0xC3C05799" />
        <pixel index="77" colour="0xC3C05799" />
        <pixel index="79" colour="0xC2EB1616" />
        <pixel index="80" colour="0xC2EB1616" />
        <pixel index="81" colour="0xC2EB1616" />
        <pixel index="83" colour="0xC1CAE56B" />
        <pixel index="84" colour="0xC1CAE56B" />
        <pixel index="85" colour="0xC1CAE56B" />
        <pixel index="87" colour="0xFF548C23" />
        <pixel index="88" colour="0xFF548C23" />
        <pixel index="89" colour="0xFF548C23" />
        <pixel index="90" colour="0xC3C05799" />
        <pixel index="91" colour="0xC3C05799" />
        <pixel index="92" colour="0xC3C05799" />
        <pixel index="94" colour="0xC2EB1616" />
        <pixel index="95" colour="0xC2EB1616" />
        <pixel index="96" colour="0xC2EB1616" />
        <pixel index="98" colour="0xC1CAE56B" />
        <pixel index="99" colour="0xC1CAE56B" />
        <pixel index="100" colour="0xC1CAE56B" />
        <pixel index="102" colour="0xFF548C23" />
        <pixel index="103" colour="0xFF548C23" />
        <pixel index="104" colour="0xFF548C23" />
        <pixel index="120" colour="0xC5E5DF5E" />
        <pixel index="121" colour="0xC5E5DF5E" />
        <pixel index="122" colour="0xC5E5DF5E" />
        <pixel index="124" colour="0xC4E30AB0" />
        <pixel index="125" colour="0xC4E30AB0" />
        <pixel index="126" colour="0xC4E30AB0" />
        <pixel index="128" colour="0xCEEEDC2D" />
        <pixel index="129" colour="0xCEEEDC2D" />
        <pixel index="130" colour="0xCEEEDC2D" />
        <pixel index="132" colour="0xADD6D2D2" />
        <pixel index="133" colour="0xADD6D2D2" />
        <pixel index="134" colour="0xADD6D2D2" />
        <pixel index="135" colour="0xC5E5DF5E" />
        <pixel index="136" colour="0xC5E5DF5E" />
        <pixel index="137" colour="0xC5E5DF5E" />
        <pixel index="139" colour="0xC4E30AB0" />
        <pixel index="140" colour="0xC4E30AB0" />
        <pixel index="141" colour="0xC4E30AB0" />
        <pixel index="143" colour="0xCEEEDC2D" />
        <pixel index="144" colour="0xCEEEDC2D" />
        <pixel index="145" colour="0xCEEEDC2D" />
        <pixel index="147" colour="0xADD6D2D2" />
        <pixel index="148" colour="0xADD6D2D2" />
        <pixel index="149" colour="0xADD6D2D2" />
        <pixel index="150" colour="0xC5E5DF5E" />
        <pixel index="151" colour="0xC5E5DF5E" />
        <pixel index="152" colour="0xC5E5DF5E" />
        <pixel index="154" colour="0xC4E30AB0" />
        <pixel index="155" colour="0xC4E30AB0" />
        <pixel index="156" colour="0xC4E30AB0" />
        <pixel index="158" colour="0xCEEEDC2D" />
        <pixel index="159" colour="0xCEEEDC2D" />
        <pixel index="160" colour="0xCEEEDC2D" />
        <pixel index="162" colour="0xADD6D2D2" />
        <pixel index="163" colour="0xADD6D2D2" />
        <pixel index="164" colour="0xADD6D2D2" />
        <pixel index="180" colour="0xE4F32F2F" />
        <pixel index="181" colour="0xE4F32F2F" />
        <pixel index="182" colour="0xE4F32F2F" />
        <pixel index="184" colour="0xFF8DCF4B" />
        <pixel index="185" colour="0xFF8DCF4B" />
        <pixel index="186" colour="0xFF8DCF4B" />
        <pixel index="188" colour="0xAA63AAE6" />
        <pixel index="189" colour="0xAA63AAE6" />
        <pixel index="190" colour="0xAA63AAE6" />
        <pixel index="192" colour="0xE0FF23EA" />
        <pixel index="193" colour="0xE0FF23EA" />
        <pixel index="194" colour="0xE0FF23EA" />
        <pixel index="195" colour="0xE4F32F2F" />
        <pixel index="196" colour="0xE4F32F2F" />
        <pixel index="197" colour="0xE4F32F2F" />
        <pixel index="199" colour="0xFF8DCF4B" />
        <pixel index="200" colour="0xFF8DCF4B" />
        <pixel index="201" colour="0xFF8DCF4B" />
        <pixel index="203" colour="0xAA63AAE6" />
        <pixel index="204" colour="0xAA63AAE6" />
        <pixel index="205" colour="0xAA63AAE6" />
        <pixel index="207" colour="0xE0FF23EA" />
        <pixel index="208" colour="0xE0FF23EA" />
        <pixel index="209" colour="0xE0FF23EA" />
        <pixel index="210" colour="0xE4F32F2F" />
        <pixel index="211" colour="0xE4F32F2F" />
        <pixel index="212" colour="0xE4F32F2F" />
        <pixel index="214" colour="0xFF8DCF4B" />
        <pixel index="215" colour="0xFF8DCF4B" />
        <pixel index="216" colour="0xFF8DCF4B" />
        <pixel index="218" colour="0xAA63AAE6" />
        <pixel index="219" colour="0xAA63AAE6" />
        <pixel index="220" colour="0xAA63AAE6" />
        <pixel index="222" colour="0xE0FF23EA" />
        <pixel index="223" colour="0xE0FF23EA" />
        <pixel index="224" colour="0xE0FF23EA" />
    </pixels>
</display>
*/