/*
<metadata description="Basic colourmap script demonstrating the use of lib_ColourTools">
    <variables>
        <variable name="hue" displayName="Hue" type="float" min="0" max="255" value="128" />
        <variable name="sat" displayName="Saturation" type="float" min="0" max="255" value="255" />
        <variable name="val" displayName="Brightness" type="float" min="0" max="255" value="255" />
        <variable name="gamma" displayName="Gamma Correction" type="bool" value="false" />
    </variables>  
</metadata>
*/

//==============================================================================
//  HSV to RGB conversion
//==============================================================================
/**
    All-integer function.
    NB! Currently this function does not provide range safety for
        h, s, v parameters

    Combines a set of 8-bit AHSV values into a 32-bit colour and returns the result.

    alpha   - The alpha in range 0 - 255 inclusive (1 byte)
    h       - The hue in range 0 - 255 inclusive (1 byte)
    s       - The saturation in range 0 - 255 inclusive (1 byte)
    v       - The value (brightness) in range 0 - 255 inclusive (1 byte)
    returns - a 32-bit colour
*/
int makeARGBfromAHSV(int alpha, int h, int s, int v)
{
    // TODO: range safety for h, s, v parameters + test performance hit

    // If grayscale:
    if (s == 0)
        return makeARGB(alpha, v, v, v);

    int region     = h / 43;
    int remainder  = h - (region * 43);   // range 0 - 42

    int p, q, t;
    p = v * (255 - s) / 255;
    q = v * (255 - (s * remainder) / 43) / 255;
    t = v * (255 - (s * (43 - remainder)) / 43) / 255;

    if (region == 0)
        return makeARGB(alpha, v, t, p);
    else if (region == 1)
        return makeARGB(alpha, q, v, p);
    else if (region == 2)
        return makeARGB(alpha, p, v, t);
    else if (region == 3)
        return makeARGB(alpha, p, q, v);
    else if (region == 4)
        return makeARGB(alpha, t, p, v);
    else
        return makeARGB(alpha, v, p, q);
}

void initialise()
{   
    setLocalConfig (33, int(gamma));        // enable gamma correction parameter
}

void repaint()
{    
    clearDisplay();
    
    int colour = makeARGBfromAHSV(255, int(hue), int(sat), int(val));
    
    fillRect(colour, 0, 0, 15, 15);
}

